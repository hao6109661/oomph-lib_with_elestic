//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC// Copyright (C) 2006-2023 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Driver function for a simple beam proble

//OOMPH-LIB includes
#include "generic.h"
#include "beam.h"
#include "meshes/one_d_lagrangian_mesh.h"

using namespace std;
using namespace oomph;

//========start_of_namespace========================
/// Namespace for physical parameters
//==================================================
namespace Global_Physical_Variables
{
 /// Non-dimensional thickness
 double H=0.0;

 /// 2nd Piola Kirchhoff pre-stress
 double Sigma0=0.0;

 /// Pressure load
 double P_ext=0.0;

 /// Non-dimensional coefficeient
 double Scale=0.0;

 /// Shear rate
 double Gamma_dot=0.0;

 /// Initial drift speed and accerlation of horiztontal motion
 double V=0.0;
 
 /// Initial speed of horiztontal motion
 double U0=0.0;

 /// Initial Beam's orientation
 double Theta_eq=-0.3;

 /// Initial x position of clamped point 
 double X0=0.8;
 
 /// Initial y position of clamped point 
 double Y0=0.5;

 /// Load function: Apply a constant external pressure to the beam
 void load(const Vector<double>& xi, const Vector<double> &x,
           const Vector<double>& N, Vector<double>& load)
 {
  for(unsigned i=0;i<2;i++) {load[i] = -P_ext*N[i];}
  //load[0] = Scale*Gamma_dot*(x[1]-0.5*N[1]*N[1]*x[1]);
  //load[1] = Scale*Gamma_dot*0.5*N[0]*N[1]*x[1];
 }

} // end of namespace




/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////



//=====================================================================
/// Upgraded Hermite Beam Element to incorporate slender body traction
//=====================================================================
class HaoHermiteBeamElement : public virtual HermiteBeamElement
{
 
public:



 /// hierher implement this: Compute the element's contribution
 /// to the drag and torque on the entire beam structure according to
 /// slender body theory
 void compute_drag_and_torque(Vector<double>& drag, double& torque)
  {
    drag[0]=V-0.5;
    drag[1]=U0-0.3;
    //torque=Theta_eq-(0.3);
  }
 
 /// Overloaded output function
 void output(std::ostream& outfile,
             const unsigned& n_plot)
  {
   oomph_info << "Hello world --  this should work!" << std::endl;
   
   
   // Local variables
   Vector<double> s(1);
   
   // Tecplot header info
   outfile << "ZONE I=" << n_plot << std::endl;
   
   // Set the number of lagrangian coordinates
   unsigned n_lagrangian = Undeformed_beam_pt->nlagrangian();
   
   // Set the dimension of the global coordinates
   unsigned n_dim = Undeformed_beam_pt->ndim();
   
   // Find out how many nodes there are
   unsigned n_node = nnode();
   
   // Find out how many positional dofs there are
   unsigned n_position_dofs = nnodal_position_type();
   
   Vector<double> posn(n_dim);
   
   // # of nodes, # of positional dofs
   Shape psi(n_node, n_position_dofs);
   
   // Loop over element plot points
   for (unsigned l1 = 0; l1 < n_plot; l1++)
    {
     s[0] = -1.0 + l1 * 2.0 / (n_plot - 1);
     
     // Get shape functions
     shape(s, psi);
     
     Vector<double> interpolated_xi(n_lagrangian);
     interpolated_xi[0] = 0.0;
     
     // Loop over coordinate directions/components of Vector
     for (unsigned i = 0; i < n_dim; i++)
      {
       // Initialise acclerations and veloc
       posn[i] = 0.0;
      }
     
     
     // Calculate displacements, accelerations and spatial derivatives
     for (unsigned l = 0; l < n_node; l++)
      {
       // Loop over positional dofs
       for (unsigned k = 0; k < n_position_dofs; k++)
        {
         // Loop over Lagrangian coordinate directions [xi_gen[] are the
         // the *gen*eralised Lagrangian coordinates: node, type, direction]
         for (unsigned i = 0; i < n_lagrangian; i++)
          {
           interpolated_xi[i] +=
            raw_lagrangian_position_gen(l, k, i) * psi(l, k);
          }

         // Loop over components of the deformed position Vector
         for (unsigned i = 0; i < n_dim; i++)
          {
           posn[i] += raw_dnodal_position_gen_dt(0, l, k, i) * psi(l, k);
          }
        }
      }

     // Get the normal vector at each plotted point
     Vector<double> N(n_dim);
     get_normal(s,N);

     double scalar_N = 0.0;
     Vector<double> load(n_dim);

     load[0] = Global_Physical_Variables::Scale*Global_Physical_Variables::Gamma_dot*(posn[1]-0.5*N[1]*N[1]*posn[1]);
     load[1] = Global_Physical_Variables::Scale*Global_Physical_Variables::Gamma_dot*0.5*N[0]*N[1]*posn[1];

     // Output position etc.
     for (unsigned i = 0; i < n_dim; i++)
      {
       outfile << posn[i] << " ";
      }
     //outfile << sqrt(scalar_posn) << " ";
     //outfile << sqrt(scalar_veloc) << " ";
     //outfile << sqrt(scalar_accel) << " ";
     for (unsigned i = 0; i < n_dim; i++)
      {
       outfile << N[i] << " ";
       scalar_N += pow(N[i], 2);
      }
     outfile << sqrt(scalar_N) << " ";
     outfile << Global_Physical_Variables::Gamma_dot*posn[1] << " ";
     outfile << 0 << " ";
     for (unsigned i = 0; i < n_dim; i++)
      {
       outfile << load[i] << " ";
      }

     outfile << (posn[0]-Global_Physical_Variables::X0)*cos(Global_Physical_Variables::Theta_eq)+(posn[1]-Global_Physical_Variables::Y0)*sin(Global_Physical_Variables::Theta_eq)<<"  ";
     outfile << -(posn[0]-Global_Physical_Variables::X0)*sin(Global_Physical_Variables::Theta_eq)+(posn[1]-Global_Physical_Variables::Y0)*cos(Global_Physical_Variables::Theta_eq);
     //outfile << posn[0]*cos(-Global_Physical_Variables::Theta_eq)-posn[1]*sin(-Global_Physical_Variables::Theta_eq)-Global_Physical_Variables::X0<<"  ";
     //outfile << posn[0]*sin(-Global_Physical_Variables::Theta_eq)+posn[1]*cos(-Global_Physical_Variables::Theta_eq)-Global_Physical_Variables::Y0;
     outfile << std::endl;
    }
  }

};
 
//======start_of_problem_class==========================================
/// Beam problem object
//======================================================================
class ElasticBeamProblem : public Problem
{
public:
 
 /// Constructor: The arguments are the number of elements, 
 /// the length of domain
 ElasticBeamProblem(const unsigned &n_elem, const double &length);
 
 /// Conduct a parameter study
 void parameter_study();
 
 /// Return pointer to the mesh
 OneDLagrangianMesh<HaoHermiteBeamElement>* mesh_pt() 
  {return dynamic_cast<OneDLagrangianMesh<HaoHermiteBeamElement>*>
    (Problem::mesh_pt());}

 /// No actions need to be performed after a solve
 void actions_after_newton_solve() {}

 /// No actions need to be performed before a solve
 void actions_before_newton_solve() {}

private:

 /// Pointer to the node whose displacement is documented
 Node* Doc_node_pt;

 /// Length of domain (in terms of the Lagrangian coordinates)
 double Length;

 /// Pointer to geometric object that represents the beam's undeformed shape
 GeomObject* Undef_beam_pt;

}; // end of problem class





//=========================================================================
/// hierher
//=========================================================================
class HaoElement : public GeneralisedElement
{
 
  public:

 /// Constructor:  Pass parameters (pinned by default)
 HaoElement(const double& V,
            const double& U0,
            const double& Theta_eq,
            const double& X0,
            const double& Y0) 
    {

     // Create internal data which contains the "rigid body" parameters
     for (unsigned i=0; i<5; i++)
      {
       // Create data: One value, no timedependence, free by default
       add_internal_data(new Data(1));
       
        // Pin the data
       internal_data_pt(i)->pin(0);
      }
     
     // Give them a value: 
     internal_data_pt(0)->set_value(0, V);
     internal_data_pt(1)->set_value(0, U0);
     internal_data_pt(2)->set_value(0, Theta_eq);
     internal_data_pt(3)->set_value(0, X0);
     internal_data_pt(4)->set_value(0, Y0);
      
    }


 /// Function that returns the Vector of pointers to the "rigid body"
 /// parameters
 Vector<Data*> thingy_parameters()
  {
   Vector<Data*> tmp_pt(5);
   for (unsigned i=0; i<5; i++)
    {
     tmp_pt[i]=internal_data_pt(i);
    }
   return tmp_pt;
  }


 

 /// hierher implement this: Compute the sum of the elements' contribution
 /// to the drag and torque on the entire beam structure according to
 /// slender body theory
 void compute_drag_and_torque(Vector<double>& drag, double& torque)
  {
    drag[0]=internal_data_pt(0)->value(0)-0.5;
    drag[1]=internal_data_pt(1)->value(0)-0.3;
    torque=internal_data_pt(2)->value(0)-(-0.3);
    oomph_info << torque << std::endl;
  }


private:

 /// Pointer to the Mesh of HaoHermiteBeamElements
 Mesh* Beam_mesh_pt;

  };

/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////



//=========================================================================
  /// Steady, straight 1D line in 2D space
  ///  \f[ x = \zeta \f]  hierher clean up
  ///  \f[ y = H \f]
  //=========================================================================
  class StraightLineVertical : public GeomObject
  {
  public:

   
   /// Constructor:
   /// Geom_data_pt[0]->value(0) = V;
   /// Geom_data_pt[1]->value(0) = U0;
   /// Geom_data_pt[2]->value(0) = Theta_eq;
   /// Geom_data_pt[3]->value(0) = X0;
   /// Geom_data_pt[4]->value(0) = Y0;
    StraightLineVertical(const Vector<Data*>& geom_data_pt) :
     GeomObject(1, 2)
    {
#ifdef PARANOID
      if (geom_data_pt.size() != 5)
      {
        std::ostringstream error_message;
        error_message << "geom_data_pt should have size 5, not "
                      << geom_data_pt.size() << std::endl;

        // hierher loop over all entries
        if (geom_data_pt[0]->nvalue() != 1)
        {
          error_message << "geom_data_pt[0] should have 1 value, not "
                        << geom_data_pt[0]->nvalue() << std::endl;
        }

        throw OomphLibError(error_message.str(),
                            OOMPH_CURRENT_FUNCTION,
                            OOMPH_EXCEPTION_LOCATION);
      }
#endif

      //V, U0, X0, Y0, theta_eq they're all members of this data object
      Geom_data_pt.resize(5);
      for (unsigned i=0; i<5; i++)
      {
       Geom_data_pt[i] = geom_data_pt[i];
      }

      // Data has been created externally: Must not clean up
      Must_clean_up = false;
    }

    /// Constructor:  Pass parameters (pinned by default)
    StraightLineVertical(const double& V, const double& U0,
                         const double& Theta_eq,
                         const double& X0, const double& Y0) : GeomObject(1, 2)
    {
      // Create Data for straight-line object
      Geom_data_pt.resize(5);
      for (unsigned i=0; i<5; i++)
       {
        // Create data: One value, no timedependence, free by default
        Geom_data_pt[i] = new Data(1);
        
        // Pin the data
        Geom_data_pt[i]->pin(0);
       }
      
      // I've created the data, I need to clean up
      Must_clean_up = true;
        
      // Give it a value: 
      Geom_data_pt[0]->set_value(0, V);
      Geom_data_pt[1]->set_value(0, U0);
      Geom_data_pt[2]->set_value(0, Theta_eq);
      Geom_data_pt[3]->set_value(0, X0);
      Geom_data_pt[4]->set_value(0, Y0);
      
    }


    /// Broken copy constructor
    StraightLineVertical(const StraightLineVertical& dummy) = delete;

    /// Broken assignment operator
    void operator=(const StraightLineVertical&) = delete;

    /// Destructor:  Clean up if necessary
    ~StraightLineVertical()
    {
      // Do I need to clean up?
      if (Must_clean_up)
      {
        for (unsigned i=0; i<5; i++)
        {
          delete Geom_data_pt[i];
          Geom_data_pt[i] = 0;
        }
      }
    }


   /// Helper function to compute the meaningful parameter values
   /// from enumerated geometric data
   void get_parameters(double& V,
                       double& U0,
                       double& Theta_eq,
                       double& X0,
                       double& Y0)
    {


     // hierher reverse this
      // // Give it a value: 
      // Geom_data_pt[0]->set_value(0, V);
      // Geom_data_pt[1]->set_value(0, U0);
      // Geom_data_pt[2]->set_value(0, Theta_eq);
      // Geom_data_pt[3]->set_value(0, X0);
      // Geom_data_pt[4]->set_value(0, Y0);
      
     oomph_info << "Broken" << std::endl;
     abort();
    }
   
     
    /// Position Vector at Lagrangian coordinate zeta
    void position(const Vector<double>& zeta, Vector<double>& r) const
    {
     double t=0.0; 

     // Translate parameters into meaningful variables do this elsewhere too
     double V=0.0;
     double U0=0.0;
     double Theta_eq=0.0;
     double X0=0.0;
     double Y0=0.0;
     // get_parameters(V,
     //                U0,
     //                Theta_eq,
     //                X0,
     //                Y0);

     // hierher use them here:
      
      // Position Vector: for t=0 so it depends on X_0, Y_0 and theta_eq
     // later: we'll provide a properly time dependent version which takes
     // the effect of V and U0 into account. // hierher 
     r[0] = -zeta[0]*sin(Geom_data_pt[2]->value(0))+
      0.5*(Geom_data_pt[0]->value(0))*t*t+
      (Geom_data_pt[1]->value(0))*t+Geom_data_pt[3]->value(0);
      r[1] = zeta[0]*cos(Geom_data_pt[2]->value(0))+
       (Geom_data_pt[0]->value(0))*t+Geom_data_pt[4]->value(0);
    }


    /// Parametrised position on object: r(zeta). Evaluated at
    /// previous timestep. t=0: current time; t>0: previous
    /// timestep.
    void position(const unsigned& t,
                  const Vector<double>& zeta,
                  Vector<double>& r) const
    {
#ifdef PARANOID
      if (t > Geom_data_pt[0]->time_stepper_pt()->nprev_values())
      {
        std::ostringstream error_message;
        error_message << "t > nprev_values() " << t << " "
                      << Geom_data_pt[0]->time_stepper_pt()->nprev_values()
                      << std::endl;

        throw OomphLibError(error_message.str(),
                            OOMPH_CURRENT_FUNCTION,
                            OOMPH_EXCEPTION_LOCATION);
      }
#endif


      // hierher wrong -- t is the discrete previous time level.
      oomph_info
       << "wrong -- t is the discrete previous time level;"
       << "implement properly and/or provide a version that"
       << "depends on continuous time." << std::endl;
      abort();
      
      // // Position Vector at time level t
      // r[0] = -zeta[0]*sin(Geom_data_pt[2]->value(0))+0.5*(Geom_data_pt[0]->value(0))*t*t+(Geom_data_pt[1]->value(0))*t+Geom_data_pt[3]->value(0);
      // r[1] = zeta[0]*cos(Geom_data_pt[2]->value(0))+(Geom_data_pt[0]->value(0))*t+Geom_data_pt[4]->value(0);
    }


    /// Derivative of position Vector w.r.t. to coordinates:
    /// \f$ \frac{dR_i}{d \zeta_\alpha}\f$ = drdzeta(alpha,i).
    /// Evaluated at current time.
    virtual void dposition(const Vector<double>& zeta,
                           DenseMatrix<double>& drdzeta) const
    {
      // Tangent vector
      drdzeta(0, 0) = -sin(Geom_data_pt[2]->value(0));
      drdzeta(0, 1) =  cos(Geom_data_pt[2]->value(0));
    }


    /// 2nd derivative of position Vector w.r.t. to coordinates:
    /// \f$ \frac{d^2R_i}{d \zeta_\alpha d \zeta_\beta}\f$ =
    /// ddrdzeta(alpha,beta,i). Evaluated at current time.
    virtual void d2position(const Vector<double>& zeta,
                            RankThreeTensor<double>& ddrdzeta) const
    {
      // Derivative of tangent vector
      ddrdzeta(0, 0, 0) = 0.0;
      ddrdzeta(0, 0, 1) = 0.0;
    }


    /// Posn Vector and its  1st & 2nd derivatives
    /// w.r.t. to coordinates:
    /// \f$ \frac{dR_i}{d \zeta_\alpha}\f$ = drdzeta(alpha,i).
    /// \f$ \frac{d^2R_i}{d \zeta_\alpha d \zeta_\beta}\f$ =
    /// ddrdzeta(alpha,beta,i).
    /// Evaluated at current time.
    virtual void d2position(const Vector<double>& zeta,
                            Vector<double>& r,
                            DenseMatrix<double>& drdzeta,
                            RankThreeTensor<double>& ddrdzeta) const
    {
      double t=0.0;

      // Position Vector
      r[0] = -zeta[0]*sin(Geom_data_pt[2]->value(0))+
       0.5*(Geom_data_pt[0]->value(0))*t*t+
       (Geom_data_pt[1]->value(0))*t+Geom_data_pt[3]->value(0);
      
      r[1] = zeta[0]*cos(Geom_data_pt[2]->value(0))+
       (Geom_data_pt[0]->value(0))*t+Geom_data_pt[4]->value(0);

      // Tangent vector
      drdzeta(0, 0) = -sin(Geom_data_pt[2]->value(0));
      drdzeta(0, 1) = cos(Geom_data_pt[2]->value(0));

      // Derivative of tangent vector
      ddrdzeta(0, 0, 0) = 0.0;
      ddrdzeta(0, 0, 1) = 0.0;
    }


    /// How many items of Data does the shape of the object depend on?
    unsigned ngeom_data() const
    {
      return Geom_data_pt.size();
    }

    /// Return pointer to the j-th Data item that the object's
    /// shape depends on
    Data* geom_data_pt(const unsigned& j)
    {
      return Geom_data_pt[j];
    }

  private:
    /// Vector of pointers to Data items that affects the object's shape
    Vector<Data*> Geom_data_pt;

    /// Do I need to clean up?
    bool Must_clean_up;
  };



//=============start_of_constructor=====================================
/// Constructor for elastic beam problem
//======================================================================
ElasticBeamProblem::ElasticBeamProblem(const unsigned &n_elem,
                                       const double &length) : Length(length)
{
 
 // // Set the undeformed beam shape
 // Undef_beam_pt=new StraightLineVertical(Global_Physical_Variables::V,
 //                                        Global_Physical_Variables::U0,
 //                                        Global_Physical_Variables::Theta_eq,
 //                                        Global_Physical_Variables::X0,
 //                                        Global_Physical_Variables::Y0);


 
 // Make the HaoElement that stores the parameters for the rigid body motion
 // hierher add this to private data of the problem class. 
 HaoElement* Hao_element_pt=new HaoElement(Global_Physical_Variables::V,
                                           Global_Physical_Variables::U0,
                                           Global_Physical_Variables::Theta_eq,
                                           Global_Physical_Variables::X0,
                                           Global_Physical_Variables::Y0);
 

 // Set the undeformed beam shape
 Undef_beam_pt=new StraightLineVertical(Hao_element_pt->thingy_parameters());



 
 //Undef_beam_pt=new StraightLineVertical(0.0,0.0,0.0,0.0,0.0); 

 // Create the (Lagrangian!) mesh, using the geometric object
 // Undef_beam_pt to specify the initial (Eulerian) position of the
 // nodes.
 Problem::mesh_pt() = 
  new OneDLagrangianMesh<HaoHermiteBeamElement>(n_elem,length,Undef_beam_pt);

 // Set the boundary conditions: Each end of the beam is fixed in space
 // Loop over the boundaries (ends of the beam)
 for(unsigned b=0;b<1;b++)
 //for(unsigned b=0;b<1;b++)
  {
   // Pin displacements in both x and y directions
   // [Note: The mesh_pt() function has been overloaded
   //  to return a pointer to the actual mesh, rather than
   //  a pointer to the Mesh base class. The current mesh is derived
   //  from the SolidMesh class. In such meshes, all access functions
   //  to the nodes, such as boundary_node_pt(...), are overloaded
   //  to return pointers to SolidNodes (whose position can be
   //  pinned) rather than "normal" Nodes.]
   mesh_pt()->boundary_node_pt(b,0)->pin_position(0); 
   mesh_pt()->boundary_node_pt(b,0)->pin_position(1); 
   mesh_pt()->boundary_node_pt(b,0)->pin_position(1,0); 
  }
 
 //Find number of elements in the mesh
 unsigned n_element = mesh_pt()->nelement();
 
 //Loop over the elements to set physical parameters etc.
 for(unsigned e=0;e<n_element;e++)
  {
   // Upcast to the specific element type
   HaoHermiteBeamElement *elem_pt = 
    dynamic_cast<HaoHermiteBeamElement*>(mesh_pt()->element_pt(e));
   
   // Set physical parameters for each element:
   elem_pt->sigma0_pt() = &Global_Physical_Variables::Sigma0;
   elem_pt->h_pt() = &Global_Physical_Variables::H;

   // Set the load Vector for each element
   elem_pt->load_vector_fct_pt() = &Global_Physical_Variables::load;

   // Set the undeformed shape for each element
   elem_pt->undeformed_beam_pt() = Undef_beam_pt;
  } // end of loop over elements

 // Choose node at which displacement is documented (halfway along -- provided
 // we have an odd number of nodes; complain if this is not the
 // case because the comparison with the exact solution will be wrong 
 // otherwise!)
 unsigned n_nod=mesh_pt()->nnode();
 if (n_nod%2!=1)
  {
   cout << "Warning: Even number of nodes " << n_nod << std::endl;
   cout << "Comparison with exact solution will be misleading..." << std::endl;
  }
 Doc_node_pt=mesh_pt()->node_pt((n_nod+1)/2-1);
 
 // Assign the global and local equation numbers
 cout << "# of dofs " << assign_eqn_numbers() << std::endl;

} // end of constructor


//=======start_of_parameter_study==========================================
/// Solver loop to perform parameter study
//=========================================================================
void ElasticBeamProblem::parameter_study()
{
 // Over-ride the default maximum value for the residuals
 Problem::Max_residuals = 1.0e10;
 
 // Set the increments in control parameters
 //double pext_increment = 0.001;
 double pext_increment = 1.0e-6;
 
 // Set initial values for control parameters 
 Global_Physical_Variables::P_ext = 0.0 - pext_increment;

 Global_Physical_Variables::Scale = 1.0e-4;
 
 // Create label for output
 DocInfo doc_info;
 
 // Set output directory -- this function checks if the output
 // directory exists and issues a warning if it doesn't.
 doc_info.set_directory("RESLT");
 
 // Open a trace file
 ofstream trace("RESLT/trace_beam.dat");
 
 // Write a header for the trace file
 trace << 
  "VARIABLES=\"p_e_x_t\",\"d\"" << 
  ", \"p_e_x_t_(_e_x_a_c_t_)\"" << std::endl;
 
 // Output file stream used for writing results
 ofstream file;
 // String used for the filename
 char filename[100]; 

 // Loop over parameter increments
 unsigned nstep=10;
 for(unsigned i=1;i<=nstep;i++)
  {
   // Increment pressure
   Global_Physical_Variables::P_ext += pext_increment;
   Global_Physical_Variables::Gamma_dot = (1.0e-2)*i;
   
   // Solve the system
   newton_solve();
    
   // Calculate exact solution for `string under tension' (applicable for
   // small wall thickness and pinned ends)

   // The tangent of the angle beta
   double tanbeta =-2.0*Doc_node_pt->x(1)/Length;

   double exact_pressure = 0.0;
   //If the beam has deformed, calculate the pressure required
   if(tanbeta!=0)
    {
      
      //Calculate the opening angle alpha
      double alpha = 2.0*atan(2.0*tanbeta/(1.0-tanbeta*tanbeta));

      // Jump back onto the main branch if alpha>180 degrees
      if (alpha<0) alpha+=2.0*MathematicalConstants::Pi;

     // Green strain:
     double gamma=0.5*(0.25*alpha*alpha/(sin(0.5*alpha)*sin(0.5*alpha))-1.0);

     //Calculate the exact pressure
     exact_pressure=Global_Physical_Variables::H*
      (Global_Physical_Variables::Sigma0+gamma)*alpha/Length;
    } 
   
   // Document the solution
   sprintf(filename,"RESLT/beam%i.dat",i);
   file.open(filename);
   mesh_pt()->output(file,5);
   file.close();
   
   // Write trace file: Pressure, displacement and exact solution
   // (for string under tension)
   trace << Global_Physical_Variables::P_ext  << " " 
         << abs(Doc_node_pt->x(1))
         << " " << exact_pressure 
         << std::endl;
  }
 
} // end of parameter study

//========start_of_main================================================
/// Driver for beam (string under tension) test problem 
//=====================================================================
int main()
{

 // Set the non-dimensional thickness 
 //Global_Physical_Variables::H=0.01; 
 Global_Physical_Variables::H=0.25; 
 
 // Set the 2nd Piola Kirchhoff prestress
 //Global_Physical_Variables::Sigma0=0.1; 
 Global_Physical_Variables::Sigma0=0.1; 
 
 // Set the length of domain
 double L = 10.0;

 // Number of elements (choose an even number if you want the control point 
 // to be located at the centre of the beam)
 unsigned n_element = 100;

 // Construst the problem
 ElasticBeamProblem problem(n_element,L);

 // Check that we're ready to go:
 cout << "\n\n\nProblem self-test ";
 if (problem.self_test()==0) 
  {
   cout << "passed: Problem can be solved." << std::endl;
  }
 else 
  {
   throw OomphLibError("Self test failed",
                       OOMPH_CURRENT_FUNCTION,
                       OOMPH_EXCEPTION_LOCATION);
  }

 // Conduct parameter study
 problem.parameter_study();

} // end of main

